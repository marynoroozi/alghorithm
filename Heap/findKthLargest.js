/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
function findKthLargest(nums, k) {
  // ØªØ§Ø¨Ø¹ Ø¨Ø§Ø²Ú¯Ø´ØªÛŒ Quick Select
  function quickSelect(left, right, kSmallest) {
    // Ø­Ø§Ù„Øª Ù¾Ø§ÛŒÙ‡: Ø§Ú¯Ù‡ Ø¨Ø§Ø²Ù‡ ØªÚ© Ø¹Ù†ØµØ± Ø¨Ø§Ø´Ù‡
    if (left === right) return nums[left];

    // ðŸŽ¯ pivot Ø±Ùˆ Ø§Ù†ØªØ®Ø§Ø¨ Ù…ÛŒâ€ŒÚ©Ù†ÛŒÙ… (Ø§ÛŒÙ†Ø¬Ø§: Ø¢Ø®Ø± Ø¨Ø§Ø²Ù‡)
    let pivot = nums[right];
    let pIndex = left;

    // âœ… Ù‡Ù…Ù‡â€ŒÛŒ Ø§Ø¹Ø¯Ø§Ø¯ Ø¨Ø²Ø±Ú¯ØªØ± Ø§Ø² pivot Ø±Ùˆ Ù…ÛŒØ§Ø±ÛŒÙ… Ø³Ù…Øª Ú†Ù¾
    for (let i = left; i < right; i++) {
      if (nums[i] > pivot) {
        // ">" Ú†ÙˆÙ† kth Ø¨Ø²Ø±Ú¯ØªØ±ÛŒÙ† Ø±Ùˆ Ù…ÛŒâ€ŒØ®ÙˆØ§ÛŒÙ…
        [nums[i], nums[pIndex]] = [nums[pIndex], nums[i]];
        pIndex++;
      }
    }

    // Ø­Ø§Ù„Ø§ pivot Ø±Ùˆ Ù…ÛŒâ€ŒØ°Ø§Ø±ÛŒÙ… Ø³Ø± Ø¬Ø§Ø´
    [nums[pIndex], nums[right]] = [nums[right], nums[pIndex]];

    // ðŸŽ¯ Ø­Ø§Ù„Ø§ Û³ Ø­Ø§Ù„Øª Ø¯Ø§Ø±ÛŒÙ…:
    if (pIndex === kSmallest) return nums[pIndex]; // kth Ø¨Ø²Ø±Ú¯ØªØ±ÛŒÙ† Ù¾ÛŒØ¯Ø§ Ø´Ø¯
    else if (pIndex > kSmallest)
      return quickSelect(left, pIndex - 1, kSmallest); // Ø¨Ú¯Ø±Ø¯ Ø³Ù…Øª Ú†Ù¾
    else return quickSelect(pIndex + 1, right, kSmallest); // Ø¨Ú¯Ø±Ø¯ Ø³Ù…Øª Ø±Ø§Ø³Øª
  }

  // Ú†ÙˆÙ† k Ø§Ø² Û± Ø´Ø±ÙˆØ¹ Ù…ÛŒØ´Ù‡ Ùˆ Ø§ÛŒÙ†Ø¯Ú©Ø³â€ŒÙ‡Ø§ Ø§Ø² Û° â†’ k-1
  return quickSelect(0, nums.length - 1, k - 1);
}
